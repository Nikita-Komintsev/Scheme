(define (create-matrix m)
    (let ((M m))
        (define (print)
            M
        )
        (define (row i)
            (if (= i 1) (car M) (car (cdr M)))
        )
        (define (column i)

            (if (= i 1)
                (list (car (row 1)) (car (row 2)))
                (list (car (cdr (row 1))) (car (cdr (row 2))))
            )
        )
        (define (element i j)
            (if (= j 1)
                (car (row i))
                (car (cdr (row i)))
            )
        )
        (define (multM N)
            (list
                (list
                    (apply + (map * (row 1) (N 'column 1)))
                    (apply + (map * (row 1) (N 'column 2)))
                )
                (list
                    (apply + (map * (row 2) (N 'column 1)))
                    (apply + (map * (row 2) (N 'column 2)))
                )
            )
        )
        (define (sumM N)
            (list
                (map + (row 1) (N 'row 1))
                (map + (row 2) (N 'row 2))
            )
        )
        (define (multN n)
            (list
                (map * (row 1) (list n n))
                (map * (row 2) (list n n))
            )
        )
        (define (transpon)
            (list
                (list (element 1 1) (element 2 1))
                (list (element 1 2) (element 2 2))
            )
        )
        (lambda args
            (apply
                (case (car args)
                    ((print) print)
                    ((row) row)
                    ((column) column)
                    ((element) element)
                    ((multM) multM)
                    ((multN) multN)
                    ((sumM) sumM)
                    ((transpon) transpon)
                    (else (begin (display "Invalid method\n") (exit 1)))
                )
                (cdr args)
            )
        )
    )
)

(define m1 (create-matrix(list (list 1 2) (list 3 4))))
(define m2 (create-matrix(list (list 1 1) (list 1 1))))
(display "Matrix 1: ")(display (m1 'print))
(newline)
(display "Matrix 2: ")(display (m2 'print))
(newline)
(display (m1 'print))(display "*")(display (m2 'print) )(display "= ") (display (m1 'multM m2))
(newline)
(display (m1 'print))(display "*")(display 5 )(display "= ") (display (m1 'multN 5))
(newline)
(display (m1 'print))(display "+")(display (m2 'print) )(display "= ")(display (m1 'sumM m2))
(newline)
(display (m1 'print))(display "T= ") (display (m1 'transpon))
(newline)
