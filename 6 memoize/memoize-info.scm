(define-syntax memo                                                                         ;позволяют создавать новые синтаксические конструкции
  (syntax-rules ()                                                                          ;syntax-rules используется для определения правил синтаксиса
    (
        (memo (define func (lambda (args ...) body ...) ) )                                 ;шаблон, который memo будет искать в коде.
        (begin
            (define real_func (lambda (args ...) body ...))                                 ;Когда найдено выражение, соответствующее шаблону, memo преобразует его в новый код.
            (define func
            (let ( (cache '()) )                                                            ; cache, которая будет хранить кэшированные результаты.
                (lambda (args ...)                                                          ; определяет новую лямбда-функцию с теми же аргументами, что и исходная.
                (if (eq? (assoc (list args ...) cache) #f)                                  ; Эта строка проверяет, существует ли уже кэшированный результат для данных аргументов.
                    (begin                                                                  ; assoc ищет в списке cache элемент, ключом которого является список аргументов.
                    (display "Calculating function with args ")                             ; Если результат для данных аргументов не найден в кэше, выполняется этот блок begin
                    (display (list args ...))
                    (newline)
                    (set! cache (cons (list (list args ...) (real_func args ...)) cache))   ;вычисляет результат функции, вызывает real_func с текущими аргументами,
                    )                                                                       ; и затем добавляет пару (аргументы, результат) в начало списка cache.
                    '()
                )
                (cadr (assoc (list args ...) cache)) ; Если результат для данных аргументов уже есть в кэше, возвращается закэшированный результат (второй элемент пары).
                )
            )
            )
        )
    )
  )
)

; decorating
(memo                                                  ;memo позволяет избежать повторного вычисления результатов для уже обработанных аргументов
(define fib
    (lambda (n i)
        (if (or (= n 1)
                (= n 2)
            ) 1 ; true
            (+ (fib (- n 1) i)
                (fib (- n 2) i)
                i
            ) ; false
        )
    )
)
)

(display (fib 10 1))
(newline)
(display (fib 10 1))
(newline)

